# 2. JPA 시작

## 2.3 라이브러리와 프로젝트 구조

- JPA 구현체로 하이버네이트를 사용하기 위한 핵심 라이브러리
    1. hibernate-core: 하이버네이트 라이브러리
    2. hibernate-entitymanager: 하이버네이트가 JPA 구현체로 동작하도록 JPA 표준을 구현한 라이브러리
    3. hibernate-jpa-2.1-api: JPA 2.1 표준 API를 모아둔 라이브러리

### 2.3.1 메이븐 의존성

```xml
<!--pom.xml-->
<dependencies>
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-entitymanager</artifactId>
		<version>4.3.10.Final</version>
	</dependency>
	<dependency>
		<groupId>com.h2database</groupId>
		<artifactId>h2</artifactId>
		<version>1.4.187</version>
	</dependency>
</dependencies>
```

```groovy
// build.gradle
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
}
```

## 2.4 객체 매핑 시작

- 기본 매핑 구조

```java
import javax.persistsence.*;

@Entity
@Table(name="MEMBER") // 테이블과 연결, 없으면 클래스 이름으로 연결
public class Member {
	
	@Id // pk임을 명시
	@Column(name = "id") // 특정 칼럼과 변수 직접 연결
	private int id;
	
	@Column(name = "name")
	private String username;
	
	private int age; // @Column 없으면 필드명으로 컬럼과 연결
	
}
```

## 2.5 persistence.xml 설정

```xml
<?xml version="1.0" encoding="UTF-8"?>
<persistence xmls="http://xmlns.jcp.org/xml/ns/persistence" version="2.1">
	<persistence-unit name="jpabook"> <!--영속성 유닛-->
		<properties>
			<!--필수 속성-->
			<property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/> <!--드라이버-->
			<property name="javax.persistence.jdbc.user" value="sa"/> <!--db 접속 아이디-->
			<property name="javax.persistence.jdbc.password" value=""/> <!--비밀번호-->
			<property name="javax.persistence.jdbc.url" value="jdbc:h2:tcp://localhost/~/test"/> <!--접속 url-->
			<property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/> <!--데이터베이스 방언 설정-->
		</properties>
	</persistence-unit>
</persistence>
```

### 2.5.1 데이터베이스 방언

JPA는 특정 데이터베이스에 종속되지 않아 **데이터베이스 별 문법 차이**에 의해 문제가 발생할 수 있다. SQL 표준을 지키지 않거나 특정 데이터베이스만의 고유한 기능을 JPA에서는 **방언**이라고 한다.

```xml
<property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
<property name="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect"/>
<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
```

## 2.6 애플리케이션 개발

### 2.6.1 엔티티 매니저 설정

엔티티 매니저 생성 과정

1. 엔티티 매니저 팩토리 생성
    - META-INF/persistence.xml에 있는 설정 정보로 엔티티매니저 팩토리 생성
    - 이 때 jpa를 동작시키기 위한 기반 객체 생성 및 데이터베이스 커넥션 풀도 생성
        
        → 생성 비용이 아주 크다
        
    - **엔티티 매니저 팩토리는 애플리케이션 전체에서 딱 한 번만 생성!!**
2. 엔티티 매니저 생성
    - 엔티티 매니저 팩토리에서 엔티티 매니저 생성
    - JPA의 기능 대부분은 엔티티 매니저가 제공(CRUD 등)
3. 종료

### 2.6.2 트랜잭션 관리

JPA 사용 시 **항상 트랜잭션 안에서 데이터 변경**이 이루어져야 한다.

### 2.6.3 비즈니스 로직

1. 등록
    
    ```java
    // EntityManager em
    em.persist(member);
    ```
    
    - JPA는 회원 엔티티의 매핑 정보(어노테이션)를 분석해 자동으로 sql문을 만들어 데이터베이스에 전달한다.
2. 수정
    
    ```java
    // transaction 안에 데이터 정보 변경
    member.setAge(2);
    ```
    
    - JPA는 어떤 엔티티가 변경되었는지 추적하는 기능을 갖춰 자동으로 update sql 생성해서 데이터베이스에 전달한다.
3. 삭제
    
    ```java
    // EntityManager em
    em.remove(member);
    ```
    
4. 한 건 조회
    
    ```java
    // EntityManager em
    Member findMember = em.find(Member.class, id);
    ```
    
    - find()는 엔티티 타입과 @ID로 데이터베이스 테이블 기본 키와 매핑한 식별자 값으로 엔티티 하나를 조회

### 2.6.4 JPQL

JPA는 엔티티 객체를 중심으로 개발 → 필요한 데이터만 가져오려면 SQL을 사용해야 함!

⇒ JPQL이라는 쿼리 언어로 해결

```java
TypedQuery<Memnber> query = 
	em.createQuery("select m from Member m", Member.class);
List<Member> members = query.getResultList();
```

- **”select m from Member m”** 이 부분이 JPQL
- from Member는 Member 엔티티 객체를 의미!!! 테이블이 아님!!!!!
- JPQL을 사용하면 JPA가 적절한 SQL문으로 변환하여 데이터베이스에 전달
